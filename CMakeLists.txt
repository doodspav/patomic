cmake_minimum_required(VERSION 3.14)

include(cmake/PreventInSourceBuilds.cmake)

project(
    patomic
    VERSION 0.5.1
    DESCRIPTION "Portable C90 Atomics Library"
    HOMEPAGE_URL "https://github.com/doodspav/patomic"
    LANGUAGES C
)

# don't change include order, OptionVariables checks if project is top level
include(cmake/ProjectIsTopLevel.cmake)
include(cmake/OptionVariables.cmake)


# ---- Declare Library ----

add_library(
    patomic_patomic
    ${build_type}
    # include
    include/patomic/patomic.h
    # src
    src/patomic.c
)

# alias to cause error at configuration time instead of link time if target is missing
add_library(patomic::patomic ALIAS patomic_patomic)


# ---- Generate Build Info Headers ----

# used in export header generated below
if(NOT PATOMIC_BUILD_SHARED)
    target_compile_definitions(patomic_patomic PUBLIC PATOMIC_STATIC_DEFINE)
endif()

include(GenerateExportHeader)
generate_export_header(
    patomic_patomic
    BASE_NAME patomic
    EXPORT_FILE_NAME include/patomic/patomic_export.h
)


# ---- Library Properties ----

set_target_properties(
    patomic_patomic PROPERTIES
    C_VISIBILITY_PRESET hidden
    VISIBILITY_INLINES_HIDDEN YES
    VERSION "${PROJECT_VERSION}"
    SOVERSION "${PROJECT_VERSION_MAJOR}"
    EXPORT_NAME patomic
    OUTPUT_NAME patomic
)

# header files generated by CMake
target_include_directories(
    patomic_patomic SYSTEM
    PUBLIC
    "$<BUILD_INTERFACE:${PROJECT_BINARY_DIR}/include>"
)

# header files from /include
target_include_directories(
    patomic_patomic ${warning_guard}
    PUBLIC
    "$<BUILD_INTERFACE:${PROJECT_SOURCE_DIR}/include>"
)

target_compile_features(patomic_patomic PUBLIC c_std_90)


# ---- Install Rules ----

if(NOT CMAKE_SKIP_INSTALL_RULES)
    include(cmake/InstallRules.cmake)
endif()


# ---- Setup Tests ----

if(PATOMIC_BUILD_TESTING)
    # need to enable testing in case BUILD_TESTING is disabled
    enable_testing()
    add_subdirectory(test)
endif()
