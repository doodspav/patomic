cmake_minimum_required(VERSION 3.14)

include(cmake/PreventInSourceBuilds.cmake)


# ---- Initialize Project ----

# used to support find_package
set(package_name "patomic")

# create base project
project(
    ${package_name}
    VERSION 0.5.1
    DESCRIPTION "Portable C90 Atomics Library"
    HOMEPAGE_URL "https://github.com/doodspav/patomic"
    LANGUAGES C
)

# don't change include order, OptionVariables checks if project is top level
include(cmake/ProjectIsTopLevel.cmake)
include(cmake/OptionVariables.cmake)


# ---- Declare Library ----

# target that we can modify (can't modify ALIAS targets)
# target name should not be the same as ${PROJECT_NAME}, causes add_subdirectory issues
set(target_name "patomic-patomic")
add_library(${target_name} ${build_type})

# alias to cause error at configuration time instead of link time if target is missing
add_library(patomic::patomic ALIAS ${target_name})

# add sources to target
target_sources(
    ${target_name} PRIVATE
    # include
    include/patomic/patomic.h
    # src
    src/patomic.c
)


# ---- Generate Build Info Headers ----

# used in export header generated below
if(NOT PATOMIC_BUILD_SHARED)
    target_compile_definitions(${target_name} PUBLIC PATOMIC_STATIC_DEFINE)
endif()

# generate header file with export macros prefixed with BASE_NAME
include(GenerateExportHeader)
generate_export_header(
    ${target_name}
    BASE_NAME patomic
    EXPORT_FILE_NAME include/patomic/patomic_export.h
)


# ---- Library Properties ----

# hide all symbols by default
# use SameMajorVersion versioning for shared library lookup
set_target_properties(
    ${target_name} PROPERTIES
    C_VISIBILITY_PRESET hidden
    VISIBILITY_INLINES_HIDDEN YES
    VERSION "${PROJECT_VERSION}"
    SOVERSION "${PROJECT_VERSION_MAJOR}"
    EXPORT_NAME "patomic"
    OUTPUT_NAME "patomic"
)

# header files generated by CMake
target_include_directories(
    ${target_name} SYSTEM PUBLIC
    "$<BUILD_INTERFACE:${PROJECT_BINARY_DIR}/include>"
)

# header files from /include
target_include_directories(
    ${target_name} ${warning_guard} PUBLIC
    "$<BUILD_INTERFACE:${PROJECT_SOURCE_DIR}/include>"
)

# require C90 compiler support
target_compile_features(${target_name} PUBLIC c_std_90)


# ---- Install Rules ----

if(NOT CMAKE_SKIP_INSTALL_RULES)
    include(cmake/InstallRules.cmake)
endif()


# ---- Setup Tests ----

if(PATOMIC_BUILD_TESTING)

    # tell unit tests where our source files are
    set(PATOMIC_SOURCE_DIR "${PROJECT_SOURCE_DIR}")

    # need to enable testing in case BUILD_TESTING is disabled
    enable_testing()
    add_subdirectory(test)

endif()
