name: Build and Run Tests
description: Builds and runs all tests as one of { ansi, coverage, sanitize, warning }.

inputs:
  test_type:
    description: 'One of { ansi, coverage, sanitize, warning }'
    required: true
    default: ''
  preset:
    description: 'CMake preset used to build patomic and googletest'
    required: true
    default: ''
  architecture:
    description: 'CPU architecture tests are run on, passed to QEMU'
    required: true
    default: ''
  triple:
    description: 'Platform triple to compile for, used to install correct compiler and sysroot'
    required: true
    default: ''
  cmake_build_shared:
    description: 'Determines value of BUILD_SHARED_LIBS for CMake, must be considered a boolean by CMake'
    required: true
    default: ''
  patomic_path:
    description: 'Source directory of patomic repository'
    required: true
    default: ''

runs:
  using: composite
  steps:
    - name: Check No Empty Inputs
      shell: bash
      run: |
        # Check No Empty Inputs
        
        # checks input is not empty
        check_input() {
          input_name="${1}"
          input_value="${2}"
          if [[ -z "${input_value}" ]]; then
            echo "Error: required input '${input_name}' is empty or was not specified."
            exit 1
          fi
        }
        
        # apply function to all inputs
        check_input "test_type" "${{ inputs.test_type }}"
        check_input "preset" "${{ inputs.preset }}"
        check_input "architecture" "${{ inputs.architecture }}"
        check_input "triple" "${{ inputs.triple }}"
        check_input "cmake_build_shared" "${{ inputs.cmake_build_shared }}"
        check_input "patomic_path" "${{ inputs.patomic_path }}"

    - name: Parse Input Values Into New Attributes
      shell: bash
      run: |
        # Parse Input Values Into New Attributes
        
        # List of variables written to GITHUB_ENV:
        # - ACTION_CMAKE_BUILD_TYPE
        # - ACTION_OS
        # - ACTION_COMPILER
        # - ACTION_COMPILER_VERSION
        # - ACTION_GCC_VERSION
        # - ACTION_LLVM_VERSION
        # - ACTION_BUILD_SHARED
        # - ACTION_UNIQUE_CACHE_ID
        # - ACTION_UNIQUE_FILE_NAME
        # - ACTION_WORKING_DIR
        
        # cmake_build_type component - generate
        if [[ "${{ inputs.test_type }}" == "ansi" ]]; then
          cmake_build_type="Release"
        elif [[ "${{ inputs.test_type }}" == "coverage" ]]; then
          cmake_build_type="Debug"
        elif [[ "${{ inputs.test_type }}" == "sanitize" ]]; then
          cmake_build_type="Debug"
        elif [[ "${{ inputs.test_type }}" == "warning" ]]; then
          cmake_build_type="Release"
        else
          echo "Error: input 'test_type' has unknown value '${{ inputs.test_type }}'; must be one of 'ansi', 'coverage', 'sanitize', 'warning'."
          exit 1
        fi
        
        # cmake_build_type component - save
        echo "ACTION_CMAKE_BUILD_TYPE: ${cmake_build_type}"
        echo "ACTION_CMAKE_BUILD_TYPE=${cmake_build_type}" >> $GITHUB_ENV
        
        # os component - generate
        if [[ "${{ runner.os }}" == "Linux" ]]; then
          os="ubuntu"
        elif [[ "${{ runner.os }}" == "macOS" ]]; then
          os="macos"
        elif [[ "${{ runner.os }}" == "Windows" ]]; then
          os="windows"
        else
          echo "Error: running on unknown OS '${{ runner.os }}'; does not match one of 'Linux', 'macOS', or 'Windows'."
          exit 1
        fi
        
        # os component - save
        echo "ACTION_OS: ${os}"
        echo "ACTION_OS=${os}" >> $GITHUB_ENV
        
        # compiler component - generate
        if [[ "${{ inputs.preset }}" == *"clang"* ]]; then
          compiler="clang"
        elif [[ "${{ inputs.preset }}" == *"gcc"* ]]; then
          compiler="gcc"
        elif [[ "${{ inputs.preset }}" == *"msvc"* ]]; then
          compiler="msvc"
        else
          echo "Error: cannot determine known compiler from 'preset' value '${{ inputs.preset }}'; must contain one of 'clang', 'gcc', or 'msvc'."
          exit 1
        fi
        
        # compiler component - save
        echo "ACTION_COMPILER: ${compiler}"
        echo "ACTION_COMPILER=${compiler}" >> $GITHUB_ENV
        
        # compiler version component - generate
        gcc_version="ACTION_GCC_VERSION_not_set_on_native"
        llvm_version="ACTION_LLVM_VERSION_not_set_on_native"
        if [[ "${{ inputs.preset }}" == *"qemu"* ]]; then
          gcc_version="11"
          llvm_version="15"
          if [[ "${compiler}" == "clang" ]]; then
            compiler_version="${clang_version}"
          elif [[ "${compiler}" == "gcc" ]]; then
            compiler_version="${gcc_version}"
          else
            echo "Error: only 'clang' and 'gcc' compilers are valid when running with qemu preset."
            exit 1
          fi
        else
          compiler_version="ACTION_COMPILER_VERSION_not_set_on_native"
        fi
        
        # compiler version component - save
        echo "ACTION_COMPILER_VERSION: ${compiler_version}"
        echo "ACTION_COMPILER_VERSION=${compiler_version}" >> $GITHUB_ENV
        
        # individual compiler version component - generate, save
        echo "ACTION_GCC_VERSION: ${gcc_version}"
        echo "ACTION_GCC_VERSION=${gcc_version}" >> $GITHUB_ENV
        echo "ACTION_LLVM_VERSION: ${llvm_version}"
        echo "ACTION_LLVM_VERSION=${llvm_version}" >> $GITHUB_ENV
        
        # build_shared component - generate
        true_values=("1" "on" "yes" "true" "y")
        false_values=("0" "off" "no" "false" "n")
        cmake_build_shared_lower=$(echo "${{ inputs.cmake_build_shared }}" | tr '[:upper:]' '[:lower:]')
        if [[ " ${true_values[@]} " =~ " ${cmake_build_shared_lower} " ]]; then
          build_shared="shared"
        elif [[ "${false_values[@]} " =~ " ${cmake_build_shared_lower} " ]]; then
          build_shared="static"
        else
          echo "Error: input 'cmake_build_shared' value is '${{ inputs.cmake_build_shared }}', must be one of: ${true_values[*]} ${false_values[*]} (case-insensitive)."
          exit 1
        fi
        
        # build_shared component - save
        echo "ACTION_BUILD_SHARED: ${build_shared}"
        echo "ACTION_BUILD_SHARED=${build_shared}" >> $GITHUB_ENV
        
        # unique_cache_id component - generate, save
        unique_cache_id="${{ inputs.triple }}-${os}-${compiler}-${build_shared}"
        echo "ACTION_UNIQUE_CACHE_ID: ${unique_cache_id}"
        echo "ACTION_UNIQUE_CACHE_ID=${unique_cache_id}" >> $GITHUB_ENV
        
        # unique_file_name component - generate, save
        # this is separate because:
        # - we don't want the whole triple in file names
        # - we may need to change this if we support multiple ABIs
        # - separate from cache-id so we can change it without affecting caches
        unique_file_name="${{ inputs.architecture }}-${os}-${compiler}-${build_shared}"
        echo "ACTION_UNIQUE_FILE_NAME: ${unique_file_name}"
        echo "ACTION_UNIQUE_FILE_NAME=${unique_file_name}" >> $GITHUB_ENV
        
        # working_dir component - generate, save
        working_dir="${{ runner.temp }}/${unique_cache_id}"
        mkdir "${working_dir}"
        echo "ACTION_WORKING_DIR: ${working_dir}"
        echo "ACTION_WORKING_DIR=${working_dir}" >> $GITHUB_ENV

    - name: Install Cross-Compiling Toolchain
      if: runner.os == 'Linux' && contains(inputs.preset, 'qemu')
      run: |
        # Install Cross-Compiling Toolchain
        
        sudo apt update
        sudo apt install g++-${{ env.ACTION_GCC_VERSION }}-multilib
        sudo apt install g++-${{ env.ACTION_GCC_VERSION }}-${{ inputs.triple }}
        sudo apt install llvm-${{ env.ACTION_LLVM_VERSION }}
        sudo apt install clang-${{ env.ACTION_LLVM_VERSION }}
        sudo apt install qemu-user

    - name: Restore Cached Sysroot (with GoogleTest)
      id: cache-sysroot
      uses: actions/cache@v3
      with:
        path: ${{ env.ACTION_WORKING_DIR }}/sysroot
        key: action-test-build-run-${{ env.ACTION_UNIQUE_CACHE_ID }}

    - name: Set Up Sysroot
      if: runner.os == 'Linux' && contains(inputs.preset, 'qemu') && steps.cache-sysroot.outputs.cache-hit != 'true'
      # cannot use symlink or reference directory directly, will not work
      run: |
        cp -r /usr/${{ inputs.triple }}/ ${{ env.ACTION_WORKING_DIR }}/sysroot

    - name: Checkout GoogleTest
      if: steps.cache-sysroot.outputs.cache-hit != 'true'
      uses: actions/checkout@v4
      with:
        repository: google/googletest
        path: ${{ env.ACTION_WORKING_DIR }}/googletest

    - name: Build and Install GoogleTest
      if: steps.cache-sysroot.outputs.cache-hit != 'true'
      run: |
        # Build and Install GoogleTest
        
        cd ${{ env.ACTION_WORKING_DIR }}/googletest
        cp -r ${{ inputs.patomic_path }}/ci/ ./
        cp ${{ inputs.patomic_path }}/CMakePresets.json .
        mkdir build
        cd build
        cmake --preset ${{ inputs.preset }} -DCMAKE_CXX_FLAGS="" -DBUILD_SHARED_LIBS=${{ inputs.cmake_build_shared }} -DCMAKE_BUILD_TYPE=${{ env.ACTION_CMAKE_BUILD_TYPE }} -Dgtest_force_shared_crt=ON -Dgtest_hide_internal_symbols=ON ..
        cmake --build . --verbose
        cmake --install . --prefix ${{ env.ACTION_WORKING_DIR }}/sysroot
