name: Build and Run Tests
description: Builds and runs all tests as one of { ansi, coverage, sanitize, warning }.

inputs:
  test_type:
    description: 'One of { ansi, coverage, sanitize, warning }'
    required: true
    default: ''
  preset:
    description: 'CMake preset used to build patomic and googletest'
    required: true
    default: ''
  architecture:
    description: 'CPU architecture tests are run on, passed to QEMU'
    required: true
    default: ''
  triple:
    description: 'Platform triple to compile for, used to install correct compiler and sysroot'
    required: true
    default: ''
  cmake_build_shared:
    description: 'Determines value of BUILD_SHARED_LIBS for CMake, must be considered a boolean by CMake'
    required: true
    default: ''
  patomic_path:
    description: 'Source directory of patomic repository'
    required: true
    default: ''
  googletest_path:
    description: 'Source directory of googletest repository'
    required: true
    default: ''

runs:
  using: composite
  steps:
    - name: Check No Empty Inputs
      shell: bash
      run: |
        # checks input is not empty
        check_input() {
          input_name="${1}"
          input_value="${2}"
          if [[ -z "${input_value}" ]]; then
            echo "Error: required input '${input_name}' is empty or was not specified."
            exit 1
          fi
        }
        
        # apply function to all inputs
        check_input "test_type" "${{ inputs.test_type }}"
        check_input "preset" "${{ inputs.preset }}"
        check_input "architecture" "${{ inputs.architecture }}"
        check_input "triple" "${{ inputs.triple }}"
        check_input "cmake_build_shared" "${{ inputs.cmake_build_shared }}"
        check_input "patomic_path" "${{ inputs.patomic_path }}"
        check_input "googletest_path" "${{ inputs.googletest_path }}"

    - name: Check Input Values and Generate Attributes
      id: generate-attributes
      shell: bash
      run: |
        # test_type component - check
        test_types=("ansi" "coverage" "sanitize" "warning")
        if ! [[ " ${test_types[@]} " =~ " ${{ inputs.test_type }} " ]]; then
          echo "Error: test_type has unknown value '${{ inputs.test_type }}'; must be one of 'ansi', 'coverage', 'sanitize', 'warning'."
          exit 1
        fi
        
        # os component - generate
        if [[ "${{ runner.os }}" == "Linux" ]]; then
          os="ubuntu"
        elif [[ "${{ runner.os }}" == "macOS" ]]; then
          os="macos"
        elif [[ "${{ runner.os }}" == "Windows" ]]; then
          os="windows"
        else
          echo "Error: running on unknown OS '${{ runner.os }}'; does not match one of 'Linux', 'macOS', or 'Windows'."
          exit 1
        fi
        
        # os component - save
        echo "os: ${os}"
        echo "os=${os}" >> $GITHUB_OUTPUT
        
        # compiler component - generate
        if [[ "${{ inputs.preset }}" == *"clang"* ]]; then
          compiler="clang"
        elif [[ "${{ inputs.preset }}" == *"gcc"* ]]; then
          compiler="gcc"
        elif [[ "${{ inputs.preset }}" == *"msvc"* ]]; then
          compiler="msvc"
        else
          echo "Error: cannot determine known compiler from 'preset' value '${{ inputs.preset }}'; must contain one of 'clang', 'gcc', or 'msvc'."
          exit 1
        fi
        
        # compiler component - save
        echo "compiler: ${compiler}"
        echo "compiler=${compiler}" >> $GITHUB_OUTPUT
        
        # build_shared component - generate
        true_values=("1" "on" "yes" "true" "y")
        false_values=("0" "off" "no" "false" "n")
        cmake_build_shared_lower=$(echo "${{ inputs.cmake_build_shared }}" | tr '[:upper:]' '[:lower:]')
        if [[ " ${true_values[@]} " =~ " ${cmake_build_shared_lower} " ]]; then
          build_shared="shared"
        elif [[ "${false_values[@]} " =~ " ${cmake_build_shared_lower} " ]]; then
          build_shared="static"
        else
          echo "Error: input 'cmake_build_shared' value is '${{ inputs.cmake_build_shared }}', must be one of: ${true_values[*]} ${false_values[*]} (case-insensitive)."
          exit 1
        fi
        
        # build_shared component - save
        echo "build_shared: ${build_shared}"
        echo "build_shared=${build_shared}" >> GITHUB_OUTPUT
