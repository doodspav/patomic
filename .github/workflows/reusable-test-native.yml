name: Run Tests on Native Platforms

on:
  workflow_call:
    inputs:
      os:
        description: 'Used to set the runs-on attribute, must be one of macos, ubuntu, windows'
        required: true
        type: string
        default: ''
      preset:
        description: 'CMake preset used to build patomic and googletest, will be conditionally suffixed with one of ansi, coverage, sanitize, warning'
        required: true
        type: string
        default: ''
      architecture:
        description: 'CPU architecture tests are run on, used for naming (does not affect how tests are run)'
        required: true
        type: string
        default: ''

jobs:
  check:
    runs-on: ubuntu-latest
    
    steps:
      - name: Check No Empty Inputs
        shell: bash
        run: |
          # checks input is not empty
          check_input() {
            input_name="${1}"
            input_value="${2}"
            if [[ -z "${input_value}" ]]; then
              echo "Error: required input '${input_name}' is empty or was not specified."
              exit 1
            else
              echo "${input_name}: ${input_value}"
            fi
          }

          # apply function to all inputs
          check_input "os"           "${{ inputs.os }}"
          check_input "preset"       "${{ inputs.preset }}"
          check_input "architecture" "${{ inputs.architecture }}"

  run:
    needs: check
    runs-on: ${{ inputs.os }}-latest
    strategy:
      matrix:
        kind:
          - coverage
          - warning
        build_shared:
          - static
          - shared
        include:
          # hidden single variables
          - compiler: ${{ contains(inputs.preset, 'clang') && 'clang' || ( contains(inputs.preset, 'gcc') && 'gcc' || 'msvc' ) }}
          - cmake_build_type: Release
          # alias variables
          - build_shared: static
            cmake_build_shared: OFF
          - build_shared: shared
            cmake_build_shared: ON
    env:
      # these have to be in env context because they depend on matrix context
      UNIQUE_ID: ${{ matrix.kind }}-${{ inputs.architecture }}-${{ inputs.os }}-${{ matrix.compiler }}-${{ matrix.build_shared }}
      UNIQUE_NAME: ${{ inputs.architecture }}-${{ inputs.os }}-${{ matrix.compiler }}-${{ matrix.build_shared }}
      CMAKE_PRESET: ${{ inputs.preset }}-${{ matrix.kind }}
      SKIP_JOB: >-
        ${{ !(
          ( matrix.kind == 'coverage' && contains(inputs.preset, 'clang') ) ||
          ( matrix.kind == 'warning' )
        ) }}

    steps:
      - name: Checkout patomic
        if: env.SKIP_JOB != 'true'
        uses: actions/checkout@v4
        with:
          path: patomic

      - name: Restore Cached GoogleTest
        if: env.SKIP_JOB != 'true'
        id: cache-googletest
        uses: actions/cache@v3
        with:
          path: googletest/build/install
          key: googletest-${{ env.UNIQUE_ID }}

      - name: Checkout GoogleTest
        if: env.SKIP_JOB != 'true' && steps.cache-googletest.outputs.cache-hit != 'true'
        uses: actions/checkout@v4
        with:
          repository: google/googletest
          path: googletest

      - name: Build and Install GoogleTest
        if: env.SKIP_JOB != 'true' && steps.cache-googletest.outputs.cache-hit != 'true'
        run: |
          cd googletest
          cp ../patomic/CMakePresets.json .
          mkdir build
          cd build
          cmake --preset ${{ env.CMAKE_PRESET }} -DBUILD_TESTING=OFF -DCMAKE_CXX_FLAGS="" -DBUILD_SHARED_LIBS=${{ matrix.cmake_build_shared }} -DCMAKE_BUILD_TYPE=${{ matrix.cmake_build_type }} -Dgtest_force_shared_crt=ON -Dgtest_hide_internal_symbols=ON ..
          cmake --build . --verbose --config ${{ matrix.cmake_build_type }}
          cmake --install . --config ${{ matrix.cmake_build_type }} --prefix install
      
      - name: Build patomic
        if: env.SKIP_JOB != 'true'
        run: |
          cd patomic
          mkdir build
          cd build
          cmake --preset ${{ env.CMAKE_PRESET }} -DBUILD_SHARED_LIBS=${{ matrix.cmake_build_shared }} -DCMAKE_BUILD_TYPE=${{ matrix.cmake_build_type }} -DGTest_ROOT:PATH="../../googletest/build/install" ..
          cmake --build . --verbose --config ${{ matrix.cmake_build_type }}
      
      - name: Test patomic
        if: env.SKIP_JOB != 'true'
        continue-on-error: true
        run: |
          cd patomic/build
          ctest --verbose --output-junit Testing/Temporary/results.xml --build-config ${{ matrix.cmake_build_type }} .
      
      - name: Prepare Test Results
        if: env.SKIP_JOB != 'true'
        run: |
          mkdir -p upload/test/${{ matrix.kind }}
          python3 patomic/test/improve_ctest_xml.py --input patomic/build/Testing/Temporary/results.xml --triple ${{ env.UNIQUE_NAME }} --output upload/test/${{ matrix.kind }}/${{ env.UNIQUE_NAME }}.xml

      - name: Upload Test Results
        if: env.SKIP_JOB != 'true'
        uses: actions/upload-artifact@v3
        with:
          name: test-results
          path: upload/test/

      - name: Prepare Coverage Results
        if: env.SKIP_JOB != 'true' && matrix.kind == 'coverage'
        shell: bash
        run: |
          mkdir -p upload/cov/${{ env.UNIQUE_ID }}
          cd patomic/build

          if [[ "${{ inputs.os }}" == "macos" ]]; then
            xcrun llvm-profdata merge -output=default.profdata test/working/**/*.profraw
            cp default.profdata ../../upload/cov/${{ env.UNIQUE_ID }}/patomic.profdata
            cp patomic.dylib.*.*.*.dylib ../../upload/cov/${{ env.UNIQUE_ID }}/patomic.bin
          else  # [[ "${{ inputs.os }}" == "ubuntu" ]]; then
            sudo apt install llvm
            llvm-profdata merge -output=default.profdata test/working/**/*.profraw
            cp default.profdata ../../upload/cov/${{ env.UNIQUE_ID }}/patomic.profdata
            cp patomic.so.*.*.* ../../upload/cov/${{ env.UNIQUE_ID }}/patomic.bin
          fi

      - name: Upload Coverage Results
        if: env.SKIP_JOB != 'true' && matrix.kind == 'coverage'
        uses: actions/upload-artifact@v3
        with:
          name: test-coverage
          path: upload/cov/
